
import { useState, useEffect } from "react";

export const useGuestManagement = (availableDomos: number | undefined) => {
  const [guests, setGuests] = useState(2);
  const [adults, setAdults] = useState(2);
  const [children, setChildren] = useState(0);

  // Efecto para ajustar autom√°ticamente los hu√©spedes cuando cambie availableDomos
  useEffect(() => {
    // No hacer nada si la disponibilidad a√∫n no se ha determinado
    if (availableDomos === undefined) {
      return;
    }

    const maxGuestsAllowed = availableDomos * 4;
    
    // SOLO ajustar si los hu√©spedes actuales EXCEDEN la capacidad m√°xima
    if (guests > maxGuestsAllowed) {
      console.log('üîÑ [useGuestManagement] Ajustando hu√©spedes porque exceden capacidad:', {
        hu√©spedesAntes: guests,
        m√°ximoPermitido: maxGuestsAllowed,
        domosDisponibles: availableDomos
      });
      
      // Si la capacidad m√°xima es 0, resetear todo
      if (maxGuestsAllowed === 0) {
        setGuests(0);
        setAdults(0);
        setChildren(0);
      } else {
        // Ajustar al m√°ximo permitido
        setGuests(maxGuestsAllowed);
        
        // Distribuir hu√©spedes entre adultos y ni√±os, priorizando mantener los adultos actuales
        const newAdults = Math.max(1, Math.min(adults, maxGuestsAllowed));
        const newChildren = maxGuestsAllowed - newAdults;
        
        setAdults(newAdults);
        setChildren(newChildren);
      }
    }
  }, [availableDomos, guests, adults]);

  return {
    guests,
    adults,
    children,
    setGuests,
    setAdults,
    setChildren
  };
};
